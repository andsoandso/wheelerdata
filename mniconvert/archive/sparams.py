"""A simple CL program that takes the path to a mrimap.py file and an 
experiment name (see Notes) and generates all the needed subject-level 
.params files.

Usage
-----
python ./sparams boldmap.py fh saveas

Notes
-----
Valid experiment names are: 
 - fh - the 2011 face/house data
"""
import sys


def _write_params(sid, mprage, t2, func, func_names, savename):
    """Write out a subject's .params file.
    Parameters
    ----------
    sid - the subject id (int)
    mprage - a list of scan number matching the mprage data
    t2 - a list of scan number matching the T2 data
    func - a list of scan number matching the functional (BOLD) data
    func_names - a list of names (str) giving a unique name to each scan
    savename - the prefix to name the saved file ('.params' is automatically
        appended).
    """
    
    fid = open(savename+".params", "w+")

    fid.write("# This .params file was autogenerated with sparams.py\n")
    fid.write("\n")
    fid.write("set patid = s{0}\n".format(sid))
    fid.write("\n")
    fid.write("#######################\n")
    fid.write("# structural scan index\n")
    fid.write("#######################\n")
    fid.write("\n")
    fid.write("set mprs = (" + " ".join(map(str, mprage)) + ")\n")
    fid.write("set tse = (" + " ".join(map(str, t2)) + ")\n")
    fid.write("\n")
    fid.write("#################\n")
    fid.write("# fMRI scan index\n")
    fid.write("#################\n")
    fid.write("\n")
    fid.write("set fstd = (" + " ".join(map(str, func)) + ")\n")
    fid.write("\t\t## fMRI study (series) number\n")
    fid.write("\n")
    fid.write("#################\n")
    fid.write("# fMRI scan names\n")
    fid.write("#################\n")
    fid.write("\n")
    fid.write("set irun = (" + " ".join(map(str, func_names)) + ")\n")
    fid.write("\t\t## Rename counting by scan number not collection index\n")

    fid.flush()
    fid.close()


def main(mrimap, bolddataname, t2name, mpragename, saveas):
    
    mrimapstr = open(mrimap).read()
    mrimap = eval(mrimapstr)
    for scode in mrimap.keys():
        sdata = mrimap[scode]
    
        t2_scan_numbers = sdata[t2name]
        mprage_scan_numbers = sdata[mpragename]
    
        func_scan_numbers = sdata[bolddataname]
        func_names = [bolddataname+str(scan_cnt) for scan_cnt in 
                range(len(sdata[bolddataname]))]
                ## Generate functional scan names by combined bolddataname
                ## with the scan number
        
        _write_params(scode, 
                mprage_scan_numbers, 
                t2_scan_numbers,
                func_scan_numbers,
                func_names,
                "s"+str(scode) + "_" + saveas)


def _process_exp(exp):
    """Use the exp name to return the names of the t2 data, the MPRAGE data
    and the bold data (in that order).
    """
    
    if exp == "fh":
        t2name = "t2"
        mpragename = "mprage"
        boldname = "fh"
    else:
        raise ValueError("exp name not understood.")
    
    return t2name, mpragename, boldname


if __name__ == "__main__":
    
    if len(sys.argv[1:]) != 3:
        raise ValueError("Three arguments required")
        
    mrimap = sys.argv[1]
    t2name, mpragename, boldname = _process_exp(sys.argv[2])
    saveas = sys.argv[3]
    
    main(mrimap, boldname, t2name, mpragename, saveas)


    